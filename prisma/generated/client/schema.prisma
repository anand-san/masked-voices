// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  polls Poll[]
  topics Topic[]
}

model Topic {
  id String @id @default(uuid())
  title String
  content Json
  externalId String @db.Text
  published Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String

  comments Comments[]

  profile Profile @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([createdBy])
}

model Comments {
  id String @id @default(uuid())
  topicId String

  text String @db.Text
  votes Int @db.Int

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Poll {
  id String @id @default(uuid())
  title String
  description String
  inviteCode String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String

  questions Question[]

  profile Profile @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([createdBy])
}

model Question {
  id String @id @default(uuid())
  pollId String

  text String @db.Text
  votes Int @db.Int

  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@index([pollId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}